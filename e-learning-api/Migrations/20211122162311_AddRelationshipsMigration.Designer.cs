// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_learning_api.DbModel;

namespace e_learning_api.Migrations
{
    [DbContext(typeof(ElearningDbContext))]
    [Migration("20211122162311_AddRelationshipsMigration")]
    partial class AddRelationshipsMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("e_learning_api.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("e_learning_api.Model.AudienceTargeted", b =>
                {
                    b.Property<int>("AudienceTargetedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AudienceTargetedId");

                    b.HasIndex("CourseId");

                    b.ToTable("AudienceTargeted");
                });

            modelBuilder.Entity("e_learning_api.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("e_learning_api.Model.Chapter", b =>
                {
                    b.Property<int>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PartCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChapterId");

                    b.HasIndex("PartCourseId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("e_learning_api.Model.Commentary", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime2");

                    b.Property<double>("Note")
                        .HasColumnType("float");

                    b.HasKey("IdUser", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Commentary");
                });

            modelBuilder.Entity("e_learning_api.Model.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<string>("OwnerOfCourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SpecialisteId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LevelCourseId");

                    b.HasIndex("OwnerOfCourseId");

                    b.HasIndex("SpecialisteId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("e_learning_api.Model.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("e_learning_api.Model.LevelCourse", b =>
                {
                    b.Property<int>("LevelCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LevelCourseId");

                    b.ToTable("LevelCourse");
                });

            modelBuilder.Entity("e_learning_api.Model.PartCourse", b =>
                {
                    b.Property<int>("PartCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartCourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("PartCourse");
                });

            modelBuilder.Entity("e_learning_api.Model.Prerequisite", b =>
                {
                    b.Property<int>("PrerequisiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrerequisiteId");

                    b.HasIndex("CourseId");

                    b.ToTable("Prerequisite");
                });

            modelBuilder.Entity("e_learning_api.Model.Purpose", b =>
                {
                    b.Property<int>("PurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurposeId");

                    b.HasIndex("CourseId");

                    b.ToTable("Purpose");
                });

            modelBuilder.Entity("e_learning_api.Model.Registration", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegistration")
                        .HasColumnType("datetime2");

                    b.HasKey("IdUser", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("e_learning_api.Model.Resources", b =>
                {
                    b.Property<int>("ResourcesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("ResourcesFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourcesId");

                    b.HasIndex("ChapterId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("e_learning_api.Model.User", b =>
                {
                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmailContact")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("e_learning_api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("e_learning_api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("e_learning_api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("e_learning_api.Model.AudienceTargeted", b =>
                {
                    b.HasOne("e_learning_api.Model.Course", "Course")
                        .WithMany("AudiencesTargeted")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_AudienceTargeted_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("e_learning_api.Model.Chapter", b =>
                {
                    b.HasOne("e_learning_api.Model.PartCourse", "PartCourse")
                        .WithMany("Chapters")
                        .HasForeignKey("PartCourseId")
                        .HasConstraintName("FK_Chapter_PartCourse");

                    b.Navigation("PartCourse");
                });

            modelBuilder.Entity("e_learning_api.Model.Commentary", b =>
                {
                    b.HasOne("e_learning_api.Model.Course", "Course")
                        .WithMany("Commentaries")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Commentary_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_api.Model.User", "User")
                        .WithMany("Commentaries")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_Commentary_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_learning_api.Model.Course", b =>
                {
                    b.HasOne("e_learning_api.Model.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Course_Category");

                    b.HasOne("e_learning_api.Model.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Course_Language");

                    b.HasOne("e_learning_api.Model.LevelCourse", "LevelCourse")
                        .WithMany("Courses")
                        .HasForeignKey("LevelCourseId")
                        .HasConstraintName("FK_Course_LevelCourse");

                    b.HasOne("e_learning_api.Model.User", "OwnerOfCourse")
                        .WithMany("CoursesOfOwner")
                        .HasForeignKey("OwnerOfCourseId")
                        .HasConstraintName("FK_Course_OwnerOfCourse");

                    b.HasOne("e_learning_api.Model.User", "Specialiste")
                        .WithMany("CoursesOfSpecialist")
                        .HasForeignKey("SpecialisteId")
                        .HasConstraintName("FK_Course_SpecialistUser");

                    b.Navigation("Category");

                    b.Navigation("Language");

                    b.Navigation("LevelCourse");

                    b.Navigation("OwnerOfCourse");

                    b.Navigation("Specialiste");
                });

            modelBuilder.Entity("e_learning_api.Model.PartCourse", b =>
                {
                    b.HasOne("e_learning_api.Model.Course", "Course")
                        .WithMany("PartCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_PartCourse_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("e_learning_api.Model.Prerequisite", b =>
                {
                    b.HasOne("e_learning_api.Model.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Prerequisite_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("e_learning_api.Model.Purpose", b =>
                {
                    b.HasOne("e_learning_api.Model.Course", "Course")
                        .WithMany("Purposes")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Purpose_Course");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("e_learning_api.Model.Registration", b =>
                {
                    b.HasOne("e_learning_api.Model.Course", "Course")
                        .WithMany("Registrations")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Registration_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_learning_api.Model.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("FK_Registration_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("e_learning_api.Model.Resources", b =>
                {
                    b.HasOne("e_learning_api.Model.Chapter", "Chapter")
                        .WithMany("Resources")
                        .HasForeignKey("ChapterId")
                        .HasConstraintName("FK_Resources_Chapter");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("e_learning_api.Model.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("e_learning_api.Model.Chapter", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("e_learning_api.Model.Course", b =>
                {
                    b.Navigation("AudiencesTargeted");

                    b.Navigation("Commentaries");

                    b.Navigation("PartCourses");

                    b.Navigation("Prerequisites");

                    b.Navigation("Purposes");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("e_learning_api.Model.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("e_learning_api.Model.LevelCourse", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("e_learning_api.Model.PartCourse", b =>
                {
                    b.Navigation("Chapters");
                });

            modelBuilder.Entity("e_learning_api.Model.User", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("CoursesOfOwner");

                    b.Navigation("CoursesOfSpecialist");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
